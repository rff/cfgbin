--------------------------------------------------------------------------------
-- TODO:
-- * Decide if use function calls in the style:
--  - string.len(s), or
--  - s:len()
--  It is in the first form now, check if it works in the second form and change
--  in all the code.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- AUXILIARY
--------------------------------------------------------------------------------

-- An wallet of all variable that we must want to throw away when finished.
local ENV = {}

-- set global options. This is mostly during the main port that is necessary,
-- as all things inside ENV table.
ENV.debug = true
ENV.compatibility = false


function ENV.DEBUG (msg)
	if ENV.debug then print ("[debug] " .. msg) end
end

ENV.DEBUG("BEGIN config")
ENV.DEBUG("lua version: " .. _VERSION)
ENV.DEBUG ("-- AUXILIARY")



-- workaround to call this script outside conky env.
function ENV.fake_conky_env()
	if not conky then
		ENV.DEBUG("Faking conky env")
		conky = {text=nil, config={}}
	end
end


-- FROM: http://stackoverflow.com/questions/9168058/lua-beginner-table-dump-to-console/22460068#22460068
-- SRC: https://gist.github.com/ripter/4270799
-- Print contents of `tbl`, with indentation.
-- `indent` sets the initial level of indentation.
function ENV.tprint(tbl, indent)
	if not indent then indent = 0 end
	for k, v in pairs(tbl) do
		formatting = string.rep("  ", indent) .. k .. ": "
		if type(v) == "table" then
			print(formatting)
			ENV.tprint(v, indent+1)
		elseif type(v) == 'boolean' then
			print(formatting .. tostring(v))		
		else
			print(formatting .. v)
		end
	end
end

-- FROM: https://coronalabs.com/blog/2014/09/02/tutorial-printing-table-contents/
-- SRC: https://github.com/robmiracle/print_r
function ENV.print_r(t) 
	local print_r_cache={}
	local function sub_print_r(t,indent)
		if (print_r_cache[tostring(t)]) then
			print(indent.."*"..tostring(t))
		else
			print_r_cache[tostring(t)]=true
			if (type(t)=="table") then
				for pos,val in pairs(t) do
					if (type(val)=="table") then
						print(indent.."["..pos.."] => "..tostring(t).." {")
						sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))
						print(indent..string.rep(" ",string.len(pos)+6).."}")
					elseif (type(val)=="string") then
						print(indent.."["..pos..'] => "'..val..'"')
					else
						print(indent.."["..pos.."] => "..tostring(val))
					end
				end
			else
				print(indent..tostring(t))
			end
		end
	end
	if (type(t)=="table") then
		print(tostring(t).." {")
		sub_print_r(t,"  ")
		print("}")
	else
		sub_print_r(t,"  ")
	end
	print()
end



-- split string per sep tokens suplied.
-- Default to split per space type (%s) chars.
-- Return a list of substrings.
function split_string(s, sep)
	sep = sep or "%s"
	local match = "[^" .. sep .. "]+"
	local list = {}
	for word in string.gmatch(s, match) do
		table.insert(list, word)
	end
	return list
end

function table_contains(table, element)
	for _, value in pairs(table) do
		if value == element then
			return true
		end
	end
	return false
end

function array_contains(table, element)
	for key, value in pairs(table) do
		if type(key) == "number" and
		   value == element then
			return true
		end
	end
	return false
end

--------------------------------------------------------------------------------
-- INFO FUNCTIONS
--------------------------------------------------------------------------------
ENV.DEBUG ("-- INFO FUNCTIONS")


function get_hostname()
	local hostname = io.popen('hostname'):read('l')
	return hostname
end


function get_homepath()
	local homepath = os.getenv("HOME")
	return homepath
end


function get_cpu_count()
	local syspath = '/sys/devices/system/cpu/present'
	local cpu_present = io.input(syspath):read('l')
	local count = tonumber(string.match(cpu_present, "%d+-(%d+)")) + 1
	return count
end


function get_cpu_count1()
	local count = 0
	local proc_cpuinfo = io.input('/proc/cpuinfo'):read('a')
	for cpu in string.gmatch(proc_cpuinfo, "processor") do
		count = count + 1
	end
	return count
end
function get_cpu_count2()
	local count = 0
	for line in io.lines('/proc/cpuinfo') do
		if string.find(line, 'processor', 1, true) then
			count = count + 1
		end
	end
	return count
end
function get_cpu_count3()
	local count = 0
	for line in io.lines('/proc/stat') do
		if string.find(line, '^cpu%d+ ') then
			count = count + 1
		end
	end
	return count
end




function get_fstab_entries()
	local entries = {}
	for line in io.lines('/etc/fstab') do
		local list = split_string(line)
		if #list == 6 and string.sub(list[1], 1, 1) ~= "#" then
			local mountline = {
				filesystem = list[1],
				mountpoint = list[2],
				fstype = list[3],
				options = split_string(list[4], ","),
				dump = tonumber(list[5]),
				pass = tonumber(list[6])
			}
			table.insert(entries, mountline)
		end
	end
	return entries
end


function ip_parse_new_eth(line)
	local id, name, anglebrackets, flags =
	      string.match(line, "^(%d+): (%w+): <(%g+)> (.*) ?$")

	id = tonumber(id)
	anglebrackets = split_string(anglebrackets, ",")
	flags = split_string(flags)

	local eth = {
		id = id,
		name = name,
		anglebrackets = anglebrackets,
		flags = flags,
		raw = line
	}
	return eth

end

function ip_parse_cfg_linkether(line)
	return split_string(line)
end
function ip_parse_cfg_inet(line)
	return split_string(line)
end
function ip_parse_cfg_inet6(line)
	return split_string(line)
end
function ip_parse_cfg_bridge(line)
	return split_string(line)
end
function ip_parse_cfg_bridge_slave(line)
	return split_string(line)
end

function ip_parse_cfg(line, eth)
	local t = split_string(line)[1]
	local cfg_list = nil

	if     t == "link/ether" then
		cfg_list = ip_parse_cfg_linkether(line)
	elseif t == "inet" then
		cfg_list = ip_parse_cfg_inet(line)
	elseif t == "int6" then
		cfg_list = ip_parse_cfg_inet6(line)
	elseif t == "bridge" then
		cfg_list = ip_parse_cfg_bridge(line)
	elseif t == "bridge_slave" then
		cfg_list = ip_parse_cfg_bridge_slave(line)
	else
		cfg_list = split_string(line)
	end

	local cfg = {
		id = t,
		cfg = cfg_list,
		raw = line
	}
	return cfg
end

function ip_parse_cfg_flags(line, eth, cfg)

	local flags_list = split_string(line)
	local flags = {
		flags = flags_list,
		raw = line
	}

	return flags
end


function get_eth_interfaces()
	local interfaces = {}
	local eth = nil
	local cfg = nil
	local flags = nil
	for line in io.popen('ip -d addr'):lines() do
		local prefix = string.match(line, '^ *')

		if string.len(prefix) == 0 then
			eth = ip_parse_new_eth(line)
			interfaces[eth.id] = eth
		elseif string.len(prefix) == 4 then
			cfg = ip_parse_cfg(line, eth)
			interfaces[eth.id][cfg.id] = cfg
		elseif string.len(prefix) == 7 then
			flags = ip_parse_cfg_flags(line, eth, cfg)
			interfaces[eth.id][cfg.id].flags = flags
		end
	end
	return interfaces
end


function select_mountpoints(remotefs)
	remotefs = remotefs or true
	
	local mountpoints = {}

	local fstab = get_fstab_entries()

	for index, entry in pairs(fstab) do
		if entry.mountpoint ~= "none" and
		   entry.fstype ~= "swap" and
		   (remotefs or entry.fstype ~= "sshfs") and
		   (remotefs or entry.fstype ~= "nfs")   and
		   (remotefs or string.sub(entry.filesystem, 1, 5)  == "/dev/")
		then
			-- match mountpoint as a subpath of the user homepath.
			-- If so, abreviate the path.
			local pattern = "^" .. get_homepath() .. "/"
			local label, matchs =  string.gsub(entry.mountpoint, pattern, "~/")

			local noauto =  array_contains(entry.options, "noauto")
			local mountpoint = entry.mountpoint

			local mpoint = {
				mountpoint = mountpoint,
				label = label,
				noauto = noauto
			}
			table.insert(mountpoints, mpoint)
		end
	end

	return mountpoints
end

--------------------------------------------------------------------------------
-- SET DEFAULTS
--------------------------------------------------------------------------------

ENV.COMPATIBILITY_DEFAULTS = {
	cpu_count = 8,
	top_entries = 10,
	network_interfaces =  {"wlan0", "eth0", "ens1",
	                       "enp3s0", "wlp16s0", "wlp2s0"
	},
	filesystems_mountpoints = {
		{mountpoint = "/",          label = "/",          noauto = false},
		{mountpoint = "/boot",      label = "/boot",      noauto = false},
		{mountpoint = "/home",      label = "/home",      noauto = false},
		{mountpoint = "/mnt/data",  label = "/mnt/data",  noauto = true},
		{mountpoint = "/mnt/BRUNO", label = "/mnt/BRUNO", noauto = true}
	}
}

ENV.STATIC_DEFAULTS = {
	cpu_count = 8,
	top_entries = 10,
	network_interfaces =  {"enp3s0", "wlp2s0", "br0"},
	filesystems_mountpoints = {
		{mountpoint = "/",
		 label = "/",
		 noauto = false
		},
		{mountpoint = "/boot",
		 label = "/boot",
		 noauto = false
		},
		{mountpoint = "/home",
		 label = "/home",
		 noauto = false
		},
		{mountpoint = "/mnt/data",
		 label = "/mnt/data",
		 noauto = true
		},
		{mountpoint = "/mnt/BRUNO",
		 label = "/mnt/BRUNO",
		 noauto = true
		},
	        {mountpoint = "/home/raoni/mnt/lsc_maritaca.nfs",
		 label = "~/mnt/lsc_maritaca.nfs",
		 noauto = true
		},
	        {mountpoint = "/home/raoni/mnt/phd_manaus.sshfs",
		 label = "~/mnt/phd_manaus.sshfs",
		 noauto = true
		},
	        {mountpoint = "/home/raoni/mnt/msc_students.sshfs",
		 label = "~/mnt/msc_students.sshfs",
		 noauto = true
		}
	}
}

local DEFAULTS = {
	cpu_count = get_cpu_count(),
	top_entries = 10,
	network_interfaces = {"br0"},
	filesystems_mountpoints = select_mountpoints()
}

--------------------------------------------------------------------------------
-- TEST AREA 
--------------------------------------------------------------------------------

ENV.DEBUG ("-- TEST AREA")

ENV.DEFAULTS = DEFAULTS
ENV.fake_conky_env()
G_ENV = ENV



--------------------------------------------------------------------------------
-- FORMAT FUNCTIONS
--------------------------------------------------------------------------------
ENV.DEBUG ("-- FORMAT FUNCTIONS")



function text_section_header()
	local text = ENV.TEXT_STATIC_header
	return text
end


function text_section_weather()
	local text = ENV.TEXT_STATIC_weather
	return text
end


function text_section_sensors()
	local text = ENV.TEXT_STATIC_sensors
	return text
end


function text_section_system()
	local text = ENV.TEXT_STATIC_system
	return text
end


function text_section_weather2()
	local text = ENV.TEXT_STATIC_weather2
	return text
end


function text_section_cpu(cpu_count)
	cpu_count = cpu_count or DEFAULTS.cpu_count

	local COMMENTED_header = [[
#${color1}CPU ${color0}${hr}
#${color0}Frequency: ${color1}${freq 1}${color0}MHz / ${color1}${freq_g 1}${color0}GHz
#${color0}CPU Usage:${color1} ${cpu cpu0}% ${cpubar 4}
#
#${color0}Frequency: ${color1}${freq 1}${color0}MHz / ${color1}${freq_g 1}${color0}GHz${alignr}\
#${color1}${freq 2}${color0}MHz / ${color1}${freq_g 2}${color0}GHz
#${color0}CPU Usage: ${color1}${cpu cpu1}% ${cpubar 4,100}${alignr}\
#${color1} ${cpu cpu2}% ${cpubar 4,100}
#
]]

	local header = [[
${color1}CPU ${color0}${hr}
${font Ubuntu Mono:size=10}\
]]
	local footnote = [[
#${alignr}${cpugraph 20,220 666666 666666}
${font}\

]] 

	-- format expect 5 integers of the same value.
	local core_format = [[
${color0}core %d: ${color1}${freq %d}${color0}MHz (${color1}${freq_g %d}${color0}GHz)\
${alignr}${color1}${cpu cpu%d}%% ${cpubar cpu%d 4,100}
]]
	local core_lines = ""

	for c = 1, cpu_count do
		core_lines = core_lines ..
		             string.format(core_format, c, c, c, c, c)
	end

	local text = COMMENTED_header .. header .. core_lines .. footnote
	return text
end


function text_section_memory()
	local text = ENV.TEXT_STATIC_memory
	return text
end


function text_section_filesystems(mountpoints, truncate)
	mountpoints = mountpoints or DEFAULTS.filesystems_mountpoints 
	local truncate = truncate or 10
	local truncate_prefix = ">"

	local header = [[
${color1}FILE SYSTEMS ${color0}${hr}
${font Ubuntu Mono:size=10}\
]]
	local footnote = [[
${font}\


]]
	local sda_graph = [[
/dev/sda
${voffset 8}\
${color0}read : ${color1}${diskio_read  /dev/sda}\
${alignr}${voffset -8}${diskiograph_read  /dev/sda 20,220 666666 666666}
${color0}write: ${color1}${diskio_write /dev/sda}\
${alignr}${voffset -8}${diskiograph_write /dev/sda 20,220 666666 666666}

]]
	local mount_line_sep = [[

]]

	-- format expect 7 strings representing:
	--   1: mount label (if size of label > 10 it may not fit the
	--      horizontal space, see (5))
	--   5: a separator betwen left and right part. The ideia is to put
	--      a \n to break the parts in two lines if the label is too big.
	--   2,3,4,6,7: mountpoint. Should be the same value.
	local mount_format = [[
${color0}%-10s: \
${if_mounted  %s}\
${color1}${fs_used  %s}/${fs_size  %s}%s${alignr}\
${color1}${fs_used_perc  %s}%% ${fs_bar 4,100  %s}\
${else}\
${alignr}<unmounted>\
${endif}\
]]
	-- format expect 8 strings representing:
	--   2,8: mount label (if size of label > 10 it may not fit the
	--        horizontal space, see (5))
	--   5: a separator betwen left and right part. The ideia is to put
	--      a \n to break the parts in two lines if the label is too big.
	--   1,3,4,6,7: mountpoint. Should be the same value.
	local mount_noauto_format = [[
${if_mounted  %s}\
${color2}%-10s: \
${color1}${fs_used  %s}/${fs_size  %s}%s${alignr}\
${color1}${fs_used_perc  %s}%% ${fs_bar 4,100  %s}\
${else}\
${color0}%-10s: \
${alignr}<unmounted>\
${endif}\
]]

	local mount_lines = {}

	for index, entry in pairs(mountpoints) do
		local l = entry.label
		local m = entry.mountpoint
		local s = ""

		-- truncate large labels and add a indicater prefix
		if truncate and #l > truncate then
			local p = truncate_prefix
			local length = truncate - #p
			l = p .. string.sub(l, -1 * length)
		end

		-- break long lines in two, based on the size of the label.
		if #l > 10 then s = "\n" end

		local line = nil

		if entry.noauto then
			line = string.format(mount_noauto_format,
			                     m, l, m, m, s, m, m, l)
		else
			line = string.format(mount_format,
			                     l, m, m, m, s, m, m)
		end

		table.insert(mount_lines, line)
	end

	mount_lines = table.concat(mount_lines, mount_line_sep)

	local text = header .. sda_graph .. mount_lines .. footnote
	return text
end


function text_section_network(interfaces)
	interfaces =  interfaces or DEFAULTS.network_interfaces 

	local header = [[
${color1}NETWORK ${color0}${hr}
]]
	local footnote = [[]]

	-- format expect 7 strings of the same value.
	local interface_format = [[
${if_up %s}\
${color0}${font Ubuntu Mono:size=10}\
%s (${addrs %s})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    %s}\
${alignr}${voffset -8}${upspeedgraph    %s 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  %s}\
${alignr}${voffset -8}${downspeedgraph  %s 20,220 000000 00ff00}
${endif}\
${font}\
\
]]

	local interface_lines = ""
	for i, name in ipairs(interfaces) do
		local n = name
		local line = string.format(interface_format, n, n, n, n, n, n, n)
		interface_lines =  interface_lines .. line
	end

	local text = header .. interface_lines .. footnote
	return text
end


function text_section_top()
	entries = entries or DEFAULTS.top_entries
	

	local header = [[
${color1}TOP ${color0}${hr}
${color0}Name         PID CPU% ${offset 4}Name         PID MEM%
${color1}${font Ubuntu Mono:size=10}\
]]
	local footnote = [[
${font}\
]]

	-- format expect 6 integers of the same value.
	local top_format = [[
${top name %2d}${goto 98}${top pid %2d}${top cpu %2d}${goto 186}${top_mem name %2d}${goto 278}${top_mem pid %2d}${top_mem mem %2d}
]]
	local top_lines = ""
	for i = 1, entries do
		top_lines = top_lines ..
		            string.format(top_format, i, i, i, i, i, i)
	end

	local text = header .. top_lines .. footnote
	return text
end


function text_section_mixer()
	local text = ENV.TEXT_STATIC_mixer
	return text
end


function text_section_logging()
	local text = ENV.TEXT_STATIC_logging
	return text
end


function text_section_fortune()
	local text = ENV.TEXT_STATIC_fortune
	return text
end


function text_section_footnote()
	local text = ENV.TEXT_STATIC_footnote
	return text
end



--------------------------------------------------------------------------------
-- CONKY CONFIGURATION
--------------------------------------------------------------------------------
ENV.DEBUG ("-- CONKY CONFIGURATION")


ENV.TEXT_ORIGINAL = [[
${color1}${time %a, %d %b %Y}${alignr}${time %T %Z}

${font Ubuntu Mono:size=10}\
${color0}${alignc}$nodename - $sysname $kernel on $machine
${font}\

${color1}WEATHER ${color0}${hr}
${font Ubuntu Mono:size=10}\
${color0}Campinas: ${color1}${weather http://weather.noaa.gov/pub/data/observations/metar/stations/ SBKP temperature}Celsius${font}

${color1}SENSORS ${color0}
${color0}${font Ubuntu Mono:size=10}\
${exec fmt-sensors.py -1}\
${font}\

${voffset -177}\
${goto 176}${color1}SYSTEM ${color0}${hr}
${font Ubuntu Mono:size=10}\
${goto 176}${color0}Uptime: ${color1}$uptime
${goto 176}${color0}Processes: ${color1}$processes${color0}+${color1}$running_processes
${if_existing /sys/class/power_supply/C23B/type Battery}\
${goto 176}${color0}Battery: ${color1}${battery C23B} ${color0}(${battery_time C23B})
${goto 176}${color1}${exec acpi -b}\
${endif}\
${font}\

${goto 176}${color1}WEATHER 02 ${color0}${hr}
${font Ubuntu Mono:size=10}\
${goto 176}${color0}Campinas: ${color1}${weather http://weather.noaa.gov/pub/data/observations/metar/stations/ SBKP temperature}Celsius




${font}\


#${color1}CPU ${color0}${hr}
#${color0}Frequency: ${color1}${freq 1}${color0}MHz / ${color1}${freq_g 1}${color0}GHz
#${color0}CPU Usage:${color1} ${cpu cpu0}% ${cpubar 4}
#
#${color0}Frequency: ${color1}${freq 1}${color0}MHz / ${color1}${freq_g 1}${color0}GHz${alignr}\
#${color1}${freq 2}${color0}MHz / ${color1}${freq_g 2}${color0}GHz
#${color0}CPU Usage: ${color1}${cpu cpu1}% ${cpubar 4,100}${alignr}\
#${color1} ${cpu cpu2}% ${cpubar 4,100}
#
${color1}CPU ${color0}${hr}
${font Ubuntu Mono:size=10}\
${color0}core 1: ${color1}${freq 1}${color0}MHz (${color1}${freq_g 1}${color0}GHz)\
${alignr}${color1}${cpu cpu1}% ${cpubar cpu1 4,100}
${color0}core 2: ${color1}${freq 2}${color0}MHz (${color1}${freq_g 2}${color0}GHz)\
${alignr}${color1}${cpu cpu2}% ${cpubar cpu2 4,100}
${color0}core 3: ${color1}${freq 3}${color0}MHz (${color1}${freq_g 3}${color0}GHz)\
${alignr}${color1}${cpu cpu3}% ${cpubar cpu3 4,100}
${color0}core 4: ${color1}${freq 4}${color0}MHz (${color1}${freq_g 4}${color0}GHz)\
${alignr}${color1}${cpu cpu4}% ${cpubar cpu4 4,100}
${color0}core 5: ${color1}${freq 5}${color0}MHz (${color1}${freq_g 5}${color0}GHz)\
${alignr}${color1}${cpu cpu5}% ${cpubar cpu5 4,100}
${color0}core 6: ${color1}${freq 6}${color0}MHz (${color1}${freq_g 6}${color0}GHz)\
${alignr}${color1}${cpu cpu6}% ${cpubar cpu6 4,100}
${color0}core 7: ${color1}${freq 7}${color0}MHz (${color1}${freq_g 7}${color0}GHz)\
${alignr}${color1}${cpu cpu7}% ${cpubar cpu7 4,100}
${color0}core 8: ${color1}${freq 8}${color0}MHz (${color1}${freq_g 8}${color0}GHz)\
${alignr}${color1}${cpu cpu8}% ${cpubar cpu8 4,100}
#${alignr}${cpugraph 20,220 666666 666666}
${font}\

${color1}MEMORY ${color0}${hr}
${font Ubuntu Mono:size=10}\
${color0}RAM : ${color1}${mem}/${memmax}\
${alignr}${memperc}% ${membar 4,100}
${color0}Swap: ${color1}${swap}/${swapmax}\
${alignr}${swapperc}% ${swapbar 4,100}
${font}\

${color1}FILE SYSTEMS ${color0}${hr}
${font Ubuntu Mono:size=10}\
/dev/sda
${voffset 8}\
${color0}read : ${color1}${diskio_read  /dev/sda}\
${alignr}${voffset -8}${diskiograph_read  /dev/sda 20,220 666666 666666}
${color0}write: ${color1}${diskio_write /dev/sda}\
${alignr}${voffset -8}${diskiograph_write /dev/sda 20,220 666666 666666}

${color0}/         : \
${if_mounted  /}\
${color1}${fs_used  /}/${fs_size  /}${alignr}\
${color1}${fs_used_perc  /}% ${fs_bar 4,100  /}\
${else}\
${alignr}<unmounted>\
${endif}\

${color0}/boot     : \
${if_mounted  /boot}\
${color1}${fs_used  /boot}/${fs_size  /boot}${alignr}\
${color1}${fs_used_perc  /boot}% ${fs_bar 4,100  /boot}\
${else}\
${alignr}<unmounted>\
${endif}\

${color0}/home     : \
${if_mounted  /home}\
${color1}${fs_used  /home}/${fs_size  /home}${alignr}\
${color1}${fs_used_perc  /home}% ${fs_bar 4,100  /home}\
${else}\
${alignr}<unmounted>\
${endif}\

${if_mounted  /mnt/data}\
${color2}/mnt/data : \
${color1}${fs_used  /mnt/data}/${fs_size  /mnt/data}${alignr}\
${color1}${fs_used_perc  /mnt/data}% ${fs_bar 4,100  /mnt/data}\
${else}\
${color0}/mnt/data : \
${alignr}<unmounted>\
${endif}\

${if_mounted  /mnt/BRUNO}\
${color2}/mnt/BRUNO: \
${color1}${fs_used  /mnt/BRUNO}/${fs_size  /mnt/BRUNO}${alignr}\
${color1}${fs_used_perc  /mnt/BRUNO}% ${fs_bar 4,100  /mnt/BRUNO}\
${else}\
${color0}/mnt/BRUNO: \
${alignr}<unmounted>\
${endif}\
${font}\


${color1}NETWORK ${color0}${hr}
${if_up wlan0}\
${color0}${font Ubuntu Mono:size=10}\
wlan0 (${addrs wlan0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    wlan0}\
${alignr}${voffset -8}${upspeedgraph    wlan0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  wlan0}\
${alignr}${voffset -8}${downspeedgraph  wlan0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up eth0}\
${color0}${font Ubuntu Mono:size=10}\
eth0 (${addrs eth0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    eth0}\
${alignr}${voffset -8}${upspeedgraph    eth0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  eth0}\
${alignr}${voffset -8}${downspeedgraph  eth0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up ens1}\
${color0}${font Ubuntu Mono:size=10}\
ens1 (${addrs ens1})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    ens1}\
${alignr}${voffset -8}${upspeedgraph    ens1 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  ens1}\
${alignr}${voffset -8}${downspeedgraph  ens1 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up enp3s0}\
${color0}${font Ubuntu Mono:size=10}\
enp3s0 (${addrs enp3s0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    enp3s0}\
${alignr}${voffset -8}${upspeedgraph    enp3s0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  enp3s0}\
${alignr}${voffset -8}${downspeedgraph  enp3s0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up wlp16s0}\
${color0}${font Ubuntu Mono:size=10}\
wlp16s0 (${addrs wlp16s0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    wlp16s0}\
${alignr}${voffset -8}${upspeedgraph    wlp16s0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  wlp16s0}\
${alignr}${voffset -8}${downspeedgraph  wlp16s0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up wlp2s0}\
${color0}${font Ubuntu Mono:size=10}\
wlp2s0 (${addrs wlp2s0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    wlp2s0}\
${alignr}${voffset -8}${upspeedgraph    wlp2s0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  wlp2s0}\
${alignr}${voffset -8}${downspeedgraph  wlp2s0 20,220 000000 00ff00}
${endif}\
${font}\
\
${color1}TOP ${color0}${hr}
${color0}Name         PID CPU% ${offset 4}Name         PID MEM%
${color1}${font Ubuntu Mono:size=10}\
${top name  1}${goto 98}${top pid  1}${top cpu  1}${goto 186}${top_mem name  1}${goto 278}${top_mem pid  1}${top_mem mem  1}
${top name  2}${goto 98}${top pid  2}${top cpu  2}${goto 186}${top_mem name  2}${goto 278}${top_mem pid  2}${top_mem mem  2}
${top name  3}${goto 98}${top pid  3}${top cpu  3}${goto 186}${top_mem name  3}${goto 278}${top_mem pid  3}${top_mem mem  3}
${top name  4}${goto 98}${top pid  4}${top cpu  4}${goto 186}${top_mem name  4}${goto 278}${top_mem pid  4}${top_mem mem  4}
${top name  5}${goto 98}${top pid  5}${top cpu  5}${goto 186}${top_mem name  5}${goto 278}${top_mem pid  5}${top_mem mem  5}
${top name  6}${goto 98}${top pid  6}${top cpu  6}${goto 186}${top_mem name  6}${goto 278}${top_mem pid  6}${top_mem mem  6}
${top name  7}${goto 98}${top pid  7}${top cpu  7}${goto 186}${top_mem name  7}${goto 278}${top_mem pid  7}${top_mem mem  7}
${top name  8}${goto 98}${top pid  8}${top cpu  8}${goto 186}${top_mem name  8}${goto 278}${top_mem pid  8}${top_mem mem  8}
${top name  9}${goto 98}${top pid  9}${top cpu  9}${goto 186}${top_mem name  9}${goto 278}${top_mem pid  9}${top_mem mem  9}
${top name 10}${goto 98}${top pid 10}${top cpu 10}${goto 186}${top_mem name 10}${goto 278}${top_mem pid 10}${top_mem mem 10}
${font}\
#
#${if_mixer_mute}\
#${color1}MIXER ${color0}${hr}
#${color0}Volume: ${color1}${mixer}% ${mixerbar}
#${endif}\
#
#${color1}LOGGING ${color0}${hr}
#${color0}syslog:
#${color1}${font Ubuntu Mono:size=9}\
#${tail /var/log/syslog.log 3}\
#${font}
#
#${color0}messages:
#${color1}${font Ubuntu Mono:size=9}\
#${tail /var/log/messages.log 3}\
#${font}
#
#${color1}FORTUNE ${color0}${hr}
#${color0}${font Ubuntu Mono:size=10}\
#${execi 120 fortune -asc | grep -xv '%' | fold -s -w50}\
#${font}
${color0}${hr}
]]




ENV.TEXT_STATIC_header = [[
${color1}${time %a, %d %b %Y}${alignr}${time %T %Z}

${font Ubuntu Mono:size=10}\
${color0}${alignc}$nodename - $sysname $kernel on $machine
${font}\

]]


ENV.TEXT_STATIC_weather = [[
${color1}WEATHER ${color0}${hr}
${font Ubuntu Mono:size=10}\
${color0}Campinas: ${color1}${weather http://tgftp.nws.noaa.gov/data/observations/metar/stations/ SBKP temperature}Celsius${font}

]]


ENV.TEXT_STATIC_sensors = [[
${color1}SENSORS ${color0}
${color0}${font Ubuntu Mono:size=10}\
${exec fmt-sensors.py -1}\
${font}\

]]


ENV.TEXT_STATIC_system = [[
${voffset -177}\
${goto 176}${color1}SYSTEM ${color0}${hr}
${font Ubuntu Mono:size=10}\
${goto 176}${color0}Uptime: ${color1}$uptime
${goto 176}${color0}Processes: ${color1}$processes${color0}+${color1}$running_processes
#${if_existing /sys/class/power_supply/C23B/type Battery}\
#${goto 176}${color0}Battery: ${color1}${battery C23B} ${color0}(${battery_time C23B})
#${goto 176}${color1}${exec acpi -b}\
#${endif}\

${font}\

]]


ENV.TEXT_STATIC_weather2 = [[
${goto 176}${color1}WEATHER 02 ${color0}${hr}
${font Ubuntu Mono:size=10}\
${goto 176}${color0}Campinas: ${color1}${weather http://tgftp.nws.noaa.gov/data/observations/metar/stations/ SBKP temperature}Celsius





${font}\


]]


ENV.TEXT_STATIC_cpu = [[
#${color1}CPU ${color0}${hr}
#${color0}Frequency: ${color1}${freq 1}${color0}MHz / ${color1}${freq_g 1}${color0}GHz
#${color0}CPU Usage:${color1} ${cpu cpu0}% ${cpubar 4}
#
#${color0}Frequency: ${color1}${freq 1}${color0}MHz / ${color1}${freq_g 1}${color0}GHz${alignr}\
#${color1}${freq 2}${color0}MHz / ${color1}${freq_g 2}${color0}GHz
#${color0}CPU Usage: ${color1}${cpu cpu1}% ${cpubar 4,100}${alignr}\
#${color1} ${cpu cpu2}% ${cpubar 4,100}
#
${color1}CPU ${color0}${hr}
${font Ubuntu Mono:size=10}\
${color0}core 1: ${color1}${freq 1}${color0}MHz (${color1}${freq_g 1}${color0}GHz)\
${alignr}${color1}${cpu cpu1}% ${cpubar cpu1 4,100}
${color0}core 2: ${color1}${freq 2}${color0}MHz (${color1}${freq_g 2}${color0}GHz)\
${alignr}${color1}${cpu cpu2}% ${cpubar cpu2 4,100}
${color0}core 3: ${color1}${freq 3}${color0}MHz (${color1}${freq_g 3}${color0}GHz)\
${alignr}${color1}${cpu cpu3}% ${cpubar cpu3 4,100}
${color0}core 4: ${color1}${freq 4}${color0}MHz (${color1}${freq_g 4}${color0}GHz)\
${alignr}${color1}${cpu cpu4}% ${cpubar cpu4 4,100}
${color0}core 5: ${color1}${freq 5}${color0}MHz (${color1}${freq_g 5}${color0}GHz)\
${alignr}${color1}${cpu cpu5}% ${cpubar cpu5 4,100}
${color0}core 6: ${color1}${freq 6}${color0}MHz (${color1}${freq_g 6}${color0}GHz)\
${alignr}${color1}${cpu cpu6}% ${cpubar cpu6 4,100}
${color0}core 7: ${color1}${freq 7}${color0}MHz (${color1}${freq_g 7}${color0}GHz)\
${alignr}${color1}${cpu cpu7}% ${cpubar cpu7 4,100}
${color0}core 8: ${color1}${freq 8}${color0}MHz (${color1}${freq_g 8}${color0}GHz)\
${alignr}${color1}${cpu cpu8}% ${cpubar cpu8 4,100}
#${alignr}${cpugraph 20,220 666666 666666}
${font}\

]]


ENV.TEXT_STATIC_memory = [[
${color1}MEMORY ${color0}${hr}
${font Ubuntu Mono:size=10}\
${color0}RAM : ${color1}${mem}/${memmax}\
${alignr}${memperc}% ${membar 4,100}
${color0}Swap: ${color1}${swap}/${swapmax}\
${alignr}${swapperc}% ${swapbar 4,100}
${font}\

]]


ENV.TEXT_STATIC_filesystems = [[
${color1}FILE SYSTEMS ${color0}${hr}
${font Ubuntu Mono:size=10}\
/dev/sda
${voffset 8}\
${color0}read : ${color1}${diskio_read  /dev/sda}\
${alignr}${voffset -8}${diskiograph_read  /dev/sda 20,220 666666 666666}
${color0}write: ${color1}${diskio_write /dev/sda}\
${alignr}${voffset -8}${diskiograph_write /dev/sda 20,220 666666 666666}

${color0}/         : \
${if_mounted  /}\
${color1}${fs_used  /}/${fs_size  /}${alignr}\
${color1}${fs_used_perc  /}% ${fs_bar 4,100  /}\
${else}\
${alignr}<unmounted>\
${endif}\

${color0}/boot     : \
${if_mounted  /boot}\
${color1}${fs_used  /boot}/${fs_size  /boot}${alignr}\
${color1}${fs_used_perc  /boot}% ${fs_bar 4,100  /boot}\
${else}\
${alignr}<unmounted>\
${endif}\

${color0}/home     : \
${if_mounted  /home}\
${color1}${fs_used  /home}/${fs_size  /home}${alignr}\
${color1}${fs_used_perc  /home}% ${fs_bar 4,100  /home}\
${else}\
${alignr}<unmounted>\
${endif}\

${if_mounted  /mnt/data}\
${color2}/mnt/data : \
${color1}${fs_used  /mnt/data}/${fs_size  /mnt/data}${alignr}\
${color1}${fs_used_perc  /mnt/data}% ${fs_bar 4,100  /mnt/data}\
${else}\
${color0}/mnt/data : \
${alignr}<unmounted>\
${endif}\

${if_mounted  /mnt/BRUNO}\
${color2}/mnt/BRUNO: \
${color1}${fs_used  /mnt/BRUNO}/${fs_size  /mnt/BRUNO}${alignr}\
${color1}${fs_used_perc  /mnt/BRUNO}% ${fs_bar 4,100  /mnt/BRUNO}\
${else}\
${color0}/mnt/BRUNO: \
${alignr}<unmounted>\
${endif}\
${font}\


]]


ENV.TEXT_STATIC_network = [[
${color1}NETWORK ${color0}${hr}
${if_up wlan0}\
${color0}${font Ubuntu Mono:size=10}\
wlan0 (${addrs wlan0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    wlan0}\
${alignr}${voffset -8}${upspeedgraph    wlan0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  wlan0}\
${alignr}${voffset -8}${downspeedgraph  wlan0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up eth0}\
${color0}${font Ubuntu Mono:size=10}\
eth0 (${addrs eth0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    eth0}\
${alignr}${voffset -8}${upspeedgraph    eth0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  eth0}\
${alignr}${voffset -8}${downspeedgraph  eth0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up ens1}\
${color0}${font Ubuntu Mono:size=10}\
ens1 (${addrs ens1})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    ens1}\
${alignr}${voffset -8}${upspeedgraph    ens1 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  ens1}\
${alignr}${voffset -8}${downspeedgraph  ens1 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up enp3s0}\
${color0}${font Ubuntu Mono:size=10}\
enp3s0 (${addrs enp3s0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    enp3s0}\
${alignr}${voffset -8}${upspeedgraph    enp3s0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  enp3s0}\
${alignr}${voffset -8}${downspeedgraph  enp3s0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up wlp16s0}\
${color0}${font Ubuntu Mono:size=10}\
wlp16s0 (${addrs wlp16s0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    wlp16s0}\
${alignr}${voffset -8}${upspeedgraph    wlp16s0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  wlp16s0}\
${alignr}${voffset -8}${downspeedgraph  wlp16s0 20,220 000000 00ff00}
${endif}\
${font}\
\
${if_up wlp2s0}\
${color0}${font Ubuntu Mono:size=10}\
wlp2s0 (${addrs wlp2s0})
${voffset 8}\
${color0}Up  : ${color1}${upspeed    wlp2s0}\
${alignr}${voffset -8}${upspeedgraph    wlp2s0 20,220 000000 ff0000}
${color0}Down: ${color1}${downspeed  wlp2s0}\
${alignr}${voffset -8}${downspeedgraph  wlp2s0 20,220 000000 00ff00}
${endif}\
${font}\
\
]]


ENV.TEXT_STATIC_top = [[
${color1}TOP ${color0}${hr}
${color0}Name         PID CPU% ${offset 4}Name         PID MEM%
${color1}${font Ubuntu Mono:size=10}\
${top name  1}${goto 98}${top pid  1}${top cpu  1}${goto 186}${top_mem name  1}${goto 278}${top_mem pid  1}${top_mem mem  1}
${top name  2}${goto 98}${top pid  2}${top cpu  2}${goto 186}${top_mem name  2}${goto 278}${top_mem pid  2}${top_mem mem  2}
${top name  3}${goto 98}${top pid  3}${top cpu  3}${goto 186}${top_mem name  3}${goto 278}${top_mem pid  3}${top_mem mem  3}
${top name  4}${goto 98}${top pid  4}${top cpu  4}${goto 186}${top_mem name  4}${goto 278}${top_mem pid  4}${top_mem mem  4}
${top name  5}${goto 98}${top pid  5}${top cpu  5}${goto 186}${top_mem name  5}${goto 278}${top_mem pid  5}${top_mem mem  5}
${top name  6}${goto 98}${top pid  6}${top cpu  6}${goto 186}${top_mem name  6}${goto 278}${top_mem pid  6}${top_mem mem  6}
${top name  7}${goto 98}${top pid  7}${top cpu  7}${goto 186}${top_mem name  7}${goto 278}${top_mem pid  7}${top_mem mem  7}
${top name  8}${goto 98}${top pid  8}${top cpu  8}${goto 186}${top_mem name  8}${goto 278}${top_mem pid  8}${top_mem mem  8}
${top name  9}${goto 98}${top pid  9}${top cpu  9}${goto 186}${top_mem name  9}${goto 278}${top_mem pid  9}${top_mem mem  9}
${top name 10}${goto 98}${top pid 10}${top cpu 10}${goto 186}${top_mem name 10}${goto 278}${top_mem pid 10}${top_mem mem 10}
${font}\
]]


ENV.TEXT_STATIC_mixer = [[
#
#${if_mixer_mute}\
#${color1}MIXER ${color0}${hr}
#${color0}Volume: ${color1}${mixer}% ${mixerbar}
#${endif}\
#
]]


ENV.TEXT_STATIC_logging = [[
#${color1}LOGGING ${color0}${hr}
#${color0}syslog:
#${color1}${font Ubuntu Mono:size=9}\
#${tail /var/log/syslog.log 3}\
#${font}
#
#${color0}messages:
#${color1}${font Ubuntu Mono:size=9}\
#${tail /var/log/messages.log 3}\
#${font}
#
]]


ENV.TEXT_STATIC_fortune = [[
#${color1}FORTUNE ${color0}${hr}
#${color0}${font Ubuntu Mono:size=10}\
#${execi 120 fortune -asc | grep -xv '%' | fold -s -w50}\
#${font}
]]


ENV.TEXT_STATIC_footnote = [[
${color0}${hr}
]]


ENV.TEXT_STATIC = ENV.TEXT_STATIC_header ..
                  ENV.TEXT_STATIC_weather ..
                  ENV.TEXT_STATIC_sensors ..
                  ENV.TEXT_STATIC_system ..
                  ENV.TEXT_STATIC_weather2 ..
                  ENV.TEXT_STATIC_cpu ..
                  ENV.TEXT_STATIC_memory ..
                  ENV.TEXT_STATIC_filesystems ..
                  ENV.TEXT_STATIC_network ..
                  ENV.TEXT_STATIC_top ..
                  ENV.TEXT_STATIC_mixer ..
                  ENV.TEXT_STATIC_logging ..
                  ENV.TEXT_STATIC_fortune ..
                  ENV.TEXT_STATIC_footnote

ENV.TEXT_COMPATIBILITY = text_section_header() ..
                         text_section_weather() ..
                         text_section_sensors() ..
                         text_section_system() ..
                         text_section_weather2() ..
                         text_section_cpu(ENV.COMPATIBILITY_DEFAULTS.cpu_count) ..
                         text_section_memory() ..
                         text_section_filesystems(ENV.COMPATIBILITY_DEFAULTS.filesystems_mountpoints) ..
                         text_section_network(ENV.COMPATIBILITY_DEFAULTS.network_interfaces) ..
                         text_section_top(ENV.COMPATIBILITY_DEFAULTS.top_entries) ..
                         text_section_mixer() ..
                         text_section_logging() ..
                         text_section_fortune() ..
                         text_section_footnote()

ENV.TEXT_NEW = text_section_header() ..
               text_section_weather() ..
               text_section_sensors() ..
               text_section_system() ..
               text_section_weather2() ..
               text_section_cpu() ..
               text_section_memory() ..
               text_section_filesystems() ..
               text_section_network() ..
               text_section_top() ..
               text_section_mixer() ..
               text_section_logging() ..
               text_section_fortune() ..
               text_section_footnote()


if ENV.compatibility then
	ENV.TEXT = ENV.TEXT_COMPATIBILITY
else
	ENV.TEXT = ENV.TEXT_NEW
end


ENV.DEBUG("SECTIONS static x dinamic:")
local sections = {"header", "weather", "sensors", "system", "weather2",
                  "cpu", "memory", "filesystems", "network", "top",
                  "mixer", "logging", "fortune", "footnote"}
for i, name in ipairs(sections) do
	local dinamic = _ENV["text_section_" .. name]()
	local static = ENV["TEXT_STATIC_" .. name]
	local result = "=="
	if dinamic ~= static then
		result = "~~"
	end
	ENV.DEBUG(string.format("    %s: %s", name, result))

	-- dump the conflicting section.
	if dinamic ~= static then
		ENV.DEBUG("===== static:\n" .. static .. "===================")
		ENV.DEBUG("===== dinamic:\n" .. dinamic .. "===================")
	end
end

if ENV.TEXT_ORIGINAL == ENV.TEXT_STATIC then
	ENV.DEBUG("TEXT original x static:  ==")
else
	ENV.DEBUG("TEXT original x static:  ~~")
end

if ENV.TEXT_ORIGINAL == ENV.TEXT then
	ENV.DEBUG("TEXT original x dinamic:  ==")
else
	ENV.DEBUG("TEXT original x dinamic:  ~~")
end

if ENV.TEXT_STATIC == ENV.TEXT then
	ENV.DEBUG("TEXT static x dinamic:  ==")
else
	ENV.DEBUG("TEXT static x dinamic:  ~~")
end

conky.text = ENV.TEXT

conky.config = {
	double_buffer = true,
	own_window = true,
	own_window_class = 'Conky',
	-- own_window_type:
	-- normal, desktop, dock, panel, override
	own_window_type = 'override', 
	own_window_argb_visual = true,
	own_window_transparent = true,
	--own_window_colour = '505050',
	own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
	--own_window_title = 'raoni_conky',


	use_spacer = 'right',
	--use_spacer = 'none',

	use_xft = true,
	font = 'Ubuntu Mono:size=12',

	--alignment = 'top_left',
	xinerama_head = 2,
	alignment = 'top_right',
	gap_x = 10,
	gap_y = 5,
	minimum_width = 350,
	minimum_height = 5,
	maximum_width = 350,

	background = false,
	border_width = 1,
	default_color = 'white',
	default_outline_color = 'white',
	default_shade_color = 'white',
	draw_borders = false,
	draw_graph_borders = true,
	draw_outline = false,
	draw_shades = false,
	--draw_graph_borders = no,
	stippled_borders = 0,

	uppercase = false,
	extra_newline = false,

	no_buffers = true,
	out_to_console = false,
	out_to_stderr = false,
	update_interval = 1.0,
	show_graph_scale = false,
	show_graph_range = false,
	cpu_avg_samples = 2,
	net_avg_samples = 2,
	temperature_unit = 'celsius',

	if_up_strictness = 'link',
	--if_up_strictness = 'address',
	top_name_width = 11,

	color0 = 'grey',
	color1 = 'white',
	color2 = 'red',
	color3 = 'blue',
	color4 = 'green',
};

ENV.DEBUG("-- END config")

--------------------------------------------------------------------------------
-------------------------------------------------------------------------------- 
