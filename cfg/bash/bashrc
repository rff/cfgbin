# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
#[[ $- != *i* ]] && return
[ -z "$PS1" ] && return
# load systemwide bashrc
#[ -r /etc/bash.bashrc ] && . /etc/bash.bashrc

# raoni: i want xterm-color to be default. better would be xterm-256color
#TERM=xterm-color

# Change default history file location to decluter home root folder.
HISTFILE="${HOME}/.config/bash/bash_history"

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
#HISTCONTROL=ignoredups:ignorespace  # same as below.
HISTCONTROL=ignoreboth

# raoni: history with timestamp.
#HISTTIMEFORMAT='[%x %X] '
HISTTIMEFORMAT='[%Y.%m.%d %T] '

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1
HISTFILESIZE=-1

# enable '**' in filename expansion for recursive directory match.
shopt -s globstar

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

SVN_SSH="ssh -p 6868"
export SVN_SSH

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    *-color*) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm* |rxvt* )
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
esac


# raoni: personal PS1
PROMPT_DIRTRIM=2
__PS1__=$PS1
#PS1='[\t \u@\h \w]$(__git_ps1) [$(echo $?)] \$ '

PS1='[\t \u@\h \[\e[37m\]\w\[\e[0m\]]$(__git_ps1) [\[$RETCSTART\]$CMDRET\[$RETCEND\]]\$ '
case "$TERM" in
    tmux* )
        PS1='[\t \u \[\e[37m\]\w\[\e[0m\]]$(__git_ps1) [\[$RETCSTART\]$CMDRET\[$RETCEND\]]\$ '
        ;;
    *)
        ;;
esac
if [ "$(ps -o comm= $PPID)" == tmux ] ; then
    PS1='[\t \u \[\e[37m\]\w\[\e[0m\]]$(__git_ps1) [\[$RETCSTART\]$CMDRET\[$RETCEND\]]\$ '
fi
if [ "$TMUX" != "" ] ; then
    PS1='[\t \u \[\e[37m\]\w\[\e[0m\]]$(__git_ps1)$(__cmdret_ps1) \$ '
fi

#PS0=
PS2='\[\e[32m\]>\[\e[0m\] '
#PS3=
PS4='\[\e[33m\]+ $0:$LINENO:\[\e[0m\] '

#PROMPT_COMMAND="CMDRET=\$? ; test \$CMDRET -eq 0 || CMDRET=\033[31m\${CMDRET}\033[0m"
PROMPT_COMMAND='run_on_prompt_command'

# Everething you want to run with PROMPT_COMMAND can be put here as isolated
# functions.  On thing that is passed to all functions as first argument is the
# last comand return code.
function run_on_prompt_command() {
    # Save last return code. This is the only part that have to be done right
    # now.
    local cmdret=$?
    #CMDRET=${cmdret}
    set_return_status ${cmdret} || true
    log_bash_persistent_history || true
}

log_bash_persistent_history() {
    local re='^ *([0-9]+) +(\[[0-9.]{10} [0-9:]{8}\]) (.*)$'
    [[ $(history 1) =~ $re ]]
    local count_part="${BASH_REMATCH[1]}"
    local date_part="${BASH_REMATCH[2]}"
    local cmd_part="${BASH_REMATCH[3]}"
    echo "$count_part $date_part $cmd_part" >> ~/.config/bash/persistent_history
}


RETCSTART_ERROR=$(echo -ne "\e[31m")
RETCSTART_SUCESS=$(echo -ne "\e[0m")
RETCEND=$(echo -ne "\e[0m")
# raoni: awesome PS1 + window manager WINDOW TITLE
function set_return_status() {
    CMDRET=$1
    RETCSTART=$RETCSTART_SUCESS
    [ ${CMDRET} != 0 ] && RETCSTART=$RETCSTART_ERROR
    case "$TERM" in
        xterm*|rxvt*)
            set_wname "$0 $(wname_info)" 
            ;;
        *)
            ;;
    esac
}

# raoni: helper function to print some info for window name.
function wname_info() {
    local term_name=${TERM}
    local shell_name=$(basename ${SHELL})
    local shell_name=$0

    [ $term_name == 'rxvt-unicode' ] && term_name='urxvt'

    echo "[${USER}@${HOSTNAME} $PWD]\$ - ${term_name}"
}

# raoni: window manager WINDOW TITLE changer
function set_wname() {
    echo -ne "\033]0;"
    echo -n "$*"
    echo -ne "\007"
}

# raoni: set WINDOW TITLE to command running
case "$TERM" in
    xterm*|rxvt*)
        trap set_beforecmd DEBUG
        ;;
    *)
        ;;
esac
function set_beforecmd() {
    case "$BASH_COMMAND" in
        *\033]0*)  # The command is trying to set the title bar as well;
                   # this is most likely the execution of $PROMPT_COMMAND.
                   # In any case nested escapes confuse the terminal, so don't
                   # output them.
            ;;
        *\033* | *\e* )
            ;;
        *) set_wname "${BASH_COMMAND} $(wname_info)"
            ;;
    esac
}


# raoni: Functions to change PS1 size, so we can use alternate formats when
# horizontal space is limited.
# TODO: Redo it better and maybe add a dinamic version that read COLS, and also
# maybe put is in set_return_status, so it can be changed automaticaly.
__BACKUP_PS1="$PS1"
__BACKUP_PROMPT_DIRTRIM="${PROMPT_DIRTRIM}"
__DIR_BREAK=' '
__GIT_BREAK=''
__PS1_index=0
__PS1=(
    "$PS1"
    '[\t \u@\h \[\e[37m\]\w\[\e[0m\]]${__DIR_BREAK}$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1)\$ '
    '[\t \u \[\e[37m\]\w\[\e[0m\]]${__DIR_BREAK}$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1)\$ '
    '[\t \[\e[37m\]\w\[\e[0m\]]${__DIR_BREAK}$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1)\$ '
    '[\A \[\e[37m\]\w\[\e[0m\]]${__DIR_BREAK}$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1)\$ '
    '\A \[\e[37m\]\w\[\e[0m\]${__DIR_BREAK}$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1)\$ '
    '\[\e[37m\]\w\[\e[0m\]${__DIR_BREAK}$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1)\$ '
    '\[\e[37m\]\w\[\e[0m\]${__DIR_BREAK}$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1 "%s")\$ '
    '$(__git_ps1 "(%s)")${__GIT_BREAK}$(__cmdret_ps1 "%s")\$ '
)
function ps1() {
    local i=${1:-${__PS1_index}}
    local sz=${#__PS1[@]}
    [ -z "$1" ] && (( i = ++i < sz ? i : 0 )) || (( i = i < sz ? i : __PS1_index ))

    __PS1_index=$i
    PS1="${__PS1[$i]}"
    printf "PS1 [$i]: \"\e[37m%s\e[0m\"\n" "${PS1}"
}

function ps1_git() {
    unalias __git_ps1
}
function ps1_nogit() {
    alias __git_ps1=true
}
function ps1_gitbreak() {
    __GIT_BREAK='\n'
}
function ps1_nogitbreak() {
    __GIT_BREAK=' '
}
function ps1_dirbreak() {
    __DIR_BREAK='\n'
}
function ps1_nodirbreak() {
    __DIR_BREAK=' '
}
function ps1_dirtrim() {
    PROMPT_DIRTRIM=${1:-${__BACKUP_PROMPT_DIRTRIM}}
}
function ps1_nodirtrim() {
    PROMPT_DIRTRIM=0
}
function ps1_cmdret() {
    __PS1_CMDRET=yes
}
function ps1_nocmdret() {
    __PS1_CMDRET=no
}
function ps1_cmdreterror() {
    __PS1_CMDRET=error
}

__PS1_CMDRET=error
function __cmdret_ps1() {
    local COLOR_ERROR="\033[31m"
    local COLOR_SUCESS="\033[0m"
    local COLOR_RESET="\033[0m"
    local RET=$CMDRET
    local COLOR_START=$COLOR_SUCESS
    local FORMAT='[%s] '

    [ ${RET} == 0 ] || COLOR_START=$COLOR_ERROR

    # FIXME: No color for now. The PS1 escapes for term controller must be put
    # directly in PS1 string because they are the first expansion.
    #local S="${COLOR_START}${RET}${COLOR_RESET}"
    local S="${RET}"
    local F=${1:-${FORMAT}}

    case ${__PS1_CMDRET} in
        error ) [ ${RET} == 0 ] && F='' ;;
           no ) F='' ;;
          yes ) ;;
            * ) ;;
    esac
    printf "$(printf "${F}" "${S}")"
}



# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias ip='ip -color'
fi

# raoni @ Thu Jul 30 21:04:08 BRT 2015
# default ls adding "group directories first" option.
alias ls='ls --color=auto --group-directories-first'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'


# raoni: sanity aliais
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# also, try not to use the canonical name and rely on the aliais (what if you
# are on some other machine and it don't have the alias and you forget it?)
alias cpi='cp -i'
alias mvi='mv -i'
alias rmi='rm -i'

# raoni: useful alias
alias g='grep'
alias gg='grep -HnrI'

alias wget='wget --no-verbose --show-progress'

# Fun alias
alias f='fortune -ac'

# raoni: some cool alias for dir change
# TODO: Change the cd_ls to cd_back/cd_back_ls
alias ..='cd_ls ..'
alias ...='cd_ls ../..'
alias ....='cd_ls ../../..'
alias .....='cd_ls ../../../..'
alias ......='cd_ls ../../../../..'
alias .1='cd_ls ..'
alias .2='cd_ls ../..'
alias .3='cd_ls ../../..'
alias .4='cd_ls ../../../..'
alias .5='cd_ls ../../../../..'

# raoni @ Wed Mar 18 13:52:38 BRT 2015
# alias to show an ls -l only for hidden files
alias lh='ls -lahd $(ls -a | grep "^\.")'

# raoni @ Fri Jan  3 14:25:08 BRST 2014
# alias to show directory stack with more info
alias lsd='dirs -v'

#raoni @ Tue May 12 15:31:49 BRT 2015
alias l1='ls -1'

#raoni @ Thu Feb 11 12:07:27 BRST 2016
# a better output for lsblk
alias lsb='lsblk -o NAME,FSTYPE,LABEL,SIZE,TYPE,MOUNTPOINT'

# raoni @ Thu Oct  3 12:58:27 BRT 2013
# alias for my functions. So we can keep function names descriptive and have
# our functions listed as alias when calling the alias  builtin.

alias cs='cd_ls'
alias cb='cd_back'
alias cbl='cd_back_ls'
alias mkcd='mkdir_cd'

# TODO: replase cd_ls, cd_back and cd_ls_back with a generic cd that accept the
# parameters to make all its functions.

# raoni: cool cd replacement
function cd_ls () {
    cd "$@" && pwd && ls --color=auto
}

# raoni: cool cd .. replacement for N levels.
function cd_back () {
    lvls=$1
    parent="."
    for (( i=0; i<lvls; i++ )) ; do
        parent+="/.."
    done
    cd "${parent}"
}

# raoni: cool cd .. replacement for N levels. With ls at the end.
function cd_back_ls () {
    lvls=$1
    parent="."
    for (( i=0; i<lvls; i++ )) ; do
        parent+="/.."
    done
    cd "${parent}" && ls --color=auto
}

function mkdir_cd () {
    dir="$1"
    mkdir "${dir}" && cd "${dir}"
}

# TODO: Use wego instead
# url: https://github.com/schachmat/wego
function weather () {
    curl wttr.in/Campinas
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# raoni @ Thu Jul 21 13:41:21 BRT 2016
# Alias for more sane behaviour of 'display' program.
alias imgview='display -resize 800x800'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# set PATH so it includes user's private bin if it exists
#if [ -d "$HOME/bin" ] ; then
#    PATH="$PATH:$HOME/bin"
#fi
PATH="${HOME}/bin:${PATH}"
export PATH


# this is a workaround to bash-completion not recognize __git_ps1.
# https://mailman.archlinux.org/pipermail/arch-general/2012-March/025888.html
# the solution in the thread don't work anymore, read the git completion file
# for more information, it is in two places:
# /usr/share/bash-completion/bash_completion/completions/git
# and
# /usr/share/git/completion/git-completion.bash
#
# what it says is to source /usr/share/git/completion/git-prompt.sh
# in the said file it gives some options that one can set to more eye candys.
GIT_PS1_SHOWDIRTYSTATE="true"
GIT_PS1_SHOWSTASHSTATE="true"
GIT_PS1_SHOWUNTRACKEDFILES="true"
GIT_PS1_SHOWUPSTREAM="auto"
[ -r /usr/share/git/completion/git-prompt.sh ] && . /usr/share/git/completion/git-prompt.sh

# Suppress annoying message when using bash (with my PS1) in a system without
# git or git-prompt
type -t __git_ps1 || alias __git_ps1=true


umask 077

PERL_MB_OPT="--install_base \"/home/raoni/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/raoni/perl5"; export PERL_MM_OPT;


[ -r "${HOME}/.config/work/bashrc" ] && . "${HOME}/.config/work/bashrc"


